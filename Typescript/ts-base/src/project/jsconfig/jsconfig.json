// {
//   "compilerOptions": {
//     /* 基本选项 */
//     "target": "es5",                       // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'（"ESNext"表示最新的ES语法，包括还处在stage X阶段）
//     "module": "commonjs",                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
//     "lib": [],                             // 指定要包含在编译中的库文件
//     "allowJs": true,                       // 允许编译 javascript 文件
//     "checkJs": true,                       // 报告 javascript 文件中的错误
//     "jsx": "preserve",                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
//     "declaration": true,                   // 生成相应的 '.d.ts' 文件
//     "sourceMap": true,                     // 生成相应的 '.map' 文件
//     "outFile": "./",                       // 将输出文件合并为一个文件
//     "outDir": "./",                        // 指定输出目录
//     "rootDir": "./",                       // 用来控制输出目录结构 --outDir.
//     "removeComments": true,                // 删除编译后的所有的注释
//     "noEmit": true,                        // 不生成输出文件
//     "noEmitOnError": true,                 // 发生错误时不输出文件
//     "noEmitHelpers": true,                 // 不生成 helper 函数，需额外安装 ts-helpers
//     "importHelpers": true,                 // 从 tslib 导入辅助工具函数文件 必须是模块
//     "isolatedModules": true,               // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.

//     /* 严格的类型检查选项 */
//     "strict": true,                        // 启用所有严格类型检查选项
//     "noImplicitAny": true,                 // 在表达式和声明上有隐含的 any类型时报错
//     "noImplicitThis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误
//     "alwaysStrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
//     "strictNullChecks": false,             // 不允许把 null、undefined 赋值给其他类型变量
//     "strictPropertyInitialization": false, // 类的实例属性必须初始化
//     "strictBindCallApply": false,          // 严格的 bind/call/apply 检查

//     /* 额外的检查 */
//     "noUnusedLocals": true,                // 有未使用的变量时，抛出错误
//     "noUnusedParameters": true,            // 有未使用的函数参数时，抛出错误
//     "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误
//     "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）

//     /* 模块解析选项 */
//     "moduleResolution": "node",            // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)。默认是classic
//     "baseUrl": "./",                       // 用于解析非相对模块名称的基目录
//     "paths": {
//       "jquery": ["node_modules/jquery/dist/jquery.slim.min.js"]
//     },                           // 模块名到基于 baseUrl 的路径映射的列表
//     "rootDirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容
//     "typeRoots": [],                       // 包含类型声明的文件列表
//     "types": [],                           // 需要包含的类型声明文件名列表
//     "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。

//     /* Source Map Options */
//     "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置
//     "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置
//     "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
//     "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性

//     /* 其他选项 */
//     "experimentalDecorators": true,        // 启用装饰器
//     "emitDecoratorMetadata": true,         // 为装饰器提供元数据的支持
//     "strictFunctionTypes": false           // 禁用函数参数双向协变检查。
//   },
//   /* 指定编译文件或排除指定编译文件 */
//   "include": [
//       "src/**/*"
//   ],
//   "exclude": [
//       "node_modules",
//       "**/*.spec.ts"
//   ],
//   "files": [
//     "core.ts",
//     "sys.ts"
//   ],
//   // 从另一个配置文件里继承配置
//   "extends": "./config/base",
//   // 让IDE在保存文件的时候根据tsconfig.json重新生成文件
//   "compileOnSave": true // 支持这个特性需要Visual Studio 2015， TypeScript1.8.4以上并且安装atom-typescript插件
// }