/* 
小Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。
并且小Q对于能否被3整除这个性质很感兴趣。
小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。
 */

// 小学学的  每个位数相加起来如果是3的倍数那么这个整数就可以被3整除
// 对于1,12,123,1234,12345,123456......1234567891011
// 011 011 011 011  发现每3个数字为一个循环，每个循环有2个能被3整除
// 题目说的是第l到第r，所以是从1开始的，而不是0开始
var line = readline().split(' ');
var l = parseInt(line[0]);
var r = parseInt(line[1]);


function isThree(r) {
  var res = 0;
  // 求得有多少个循环
  if(r % 3 !== 0) {
    // 不能被3整除，可以把余数理解为是最后一个不完全循环中的数字的个数
    // 这里的-1 是因为 如果余1 则视为0  余2则视为1   余数只可能是 1 2
    res = Math.floor(r / 3) * 2 + (r % 3 - 1);
  } else {
    // 能被三整除
    res = Math.floor(r / 3) * 2;
  }

  return res;
}

// 1 2 => 1
// 1 2 3 4  5 => 3 所以要不包括1 2
//之所以要减去isThree(i-1)，是因为左端点还没固定
console.log(isThree(r) - isThree(l - 1));
// console.log(isThree(5) - isThree(1));