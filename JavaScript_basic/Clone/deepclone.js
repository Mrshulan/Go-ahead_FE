function clone(source) {
  let target = null
  let type = Object.prototype.toString.call(source)

  // ÈóÆÈ¢ò‰ª£Á†Å
  // for(var key in source) {
  //   if(source.hasOwnProperty(key)) {
  //     if(typeof source[key] === 'object') {
  //       target[key] = clone(source[key])
  //     } else {
  //       target[key] = source
  //     }
  //   }
  // }


  if(type === '[object Array]') {
    target = []
    for (let i = 0,iL = source.length;i < iL;i++) {
      // ÈÅøÂÖç‰∏ÄÂ±ÇÊ≠ªÂæ™ÁéØ
      target[i] = source[i] = source ? target : clone(source[i])
    }
  } else if (type === '[object Object]') {
    target = {}
    for (let key in source) {
      if(source.hasOwnProperty(key)) {
        target[key] = source[key] === source ? target : clone(source[key])
      }
    }
  } else {
    // Âü∫Êú¨Á±ªÂûã‰ªÄ‰πàÁöÑ
    // Â¶ÇÊûúÊòØÂÖ∂‰ªñÁ±ªÂûãÂ∞±Áõ¥Êé•ËøîÂõû ÊØîÊñπËØ¥‰∏ãÈù¢ target["name"] = "shulan" üëÜ
    return source
  }

  return target
}

// console.log(clone({name: "shulan"}))

// // Ê≤°ÊúâÂØπÂèÇÊï∞ÂÅöÊ£ÄÊµã Âà§Êñ≠ÊòØÂê¶ÊòØÂØπË±°ÈÄªËæë‰∏çÂ§ü‰∏•Ë∞® Ê≤°ÊúâËÄÉËôëÊï∞ÁªÑÂÖºÂÆπ Âæ™ÁéØÂºïÁî®Áõ¥Êé•Âç°Ê≠ª‰Ω†(ÁàÜÊ†à)


/* 
* deep Ê∑±Â∫¶
* breadth ÂπøÂ∫¶
*/

function createData (deep, breadth) {
  var data = {}
  var temp = data

  for(var i = 0;i < deep;i++) {
    temp = temp['data'] = {}

    for(var j = 0;j < breadth;j++) {
      temp[j] = j
    }
  }

  return data
}

// console.log(createData(2, 3))
// console.log(createData(3, 1))
// clone(createData(1000)) // Ëé´ÂæóÈóÆÈ¢ò
// // clone(createData(10000)) Maximum call stack size exceeded
// clone(createData(10, 100000)) // Ê∑±Â∫¶Â§ß‰∫Ü‰ºöÁàÜÊ†à ÂπøÂ∫¶Â∞±‰∏ç‰ºö


// function cloneJSON(source) {
//   return JSON.parse(JSON.stringify(source))
// }

function cloneJSON(source, errOrDef = true) {
  let type = Object.prototype.toString.call(source)
  
  // ‰∏ÄÂÅáÂàôÂÅá Â∞ΩÊó©ÈÄÄÂá∫
  if(type !== '[object Object]' && type !== '[object Array]') return source

  try {
    return JSON.parse(JSON.stringify(source))
  } catch(err) {
    if(errOrDef === true) {
      // ÈîôËØØÈªòËÆ§ËÆæÁΩÆ
      throw(err)
    } else {
      console.error("cloneJSON Error: " + err.message)
      
      return errOrDef
    }
  }
}


// ÁúãÊù•‰πüÊòØÈááÁî®ÈÄíÂΩíÁöÑÊñπÊ≥ï
// cloneJSON(createData(10000)) // Maximum call stack size exceeded

// var a = {}
// a.a = a

// Âæ™ÁéØÂºïÁî®Êä•Èîô ÈááÁî®ÁöÑÊòØ Âæ™ÁéØÊ£ÄÊµã
// cloneJSON(a, false) // Converting circular structure to JSON

// var a = {
//   a1: 1,
//   a2: {
//     b1: 1,
//     b2: {
//       c: 1
//     }
//   }
// }

// ÂÖ∂ÂÆûÂ∞±ÊòØ‰∏ÄÈ¢óÊ†ë
// Âæ™ÁéØÈÅçÂéÜ‰∏ÄÊ£µÊ†ëÔºåÂÄüÂä©‰∏Ä‰∏™Ê†àÔºåÂΩìÊ†à‰∏∫Á©∫Êó∂ËØ¥ÊòéÈÅçÂéÜÂÆåÔºåÊ†àÈáåËæπÂ≠òÊîæ‰∏ã‰∏Ä‰∏™Ë¶ÅÊã∑Ë¥ùÁöÑËäÇÁÇπ
// Ê∂àÈô§ÁàÜÊ†à‰∏§Êù°Ë∑Ø1 Ê∂àÈô§Â∞æÈÄíÂΩí 2 ‰∏çÁî®ÈÄíÂΩíÈááÁî®Âæ™ÁéØ

function cloneLoop(source) {
  let type = Object.prototype.toString.call(source)
  // Ê†πËäÇÁÇπ
  const target = null

  if(type === '[object Object]') {
    target = {}
  } else if (type === '[object Array]') {
    target = []
  }

  // parentËÆ∞ÂΩïÁöÑÊã∑Ë¥ù‰ΩçÁΩÆ
  // keyÂ≠òÊîæÂì™‰∏Ä‰∏™Áà∂ÂÖÉÁ¥†(Â¶ÇÊûúÊòØÂØπË±°ÁöÑËØù)ÁöÑÂ≠êÂÖÉÁ¥†Êã∑Ë¥ùÂØπË±° ËÆ∞ÂΩïÊã∑Ë¥ùÁöÑÁ¥¢Âºï‰∏ãÊ†á
  const loopList = [
    {
      parent: target,
      key: undefined,
      data: source
    }
  ]
  // ÈÅçÂéÜÂΩìÂâçËäÇÁÇπ‰∏ãÁöÑÂ≠êÂÖÉÁ¥†ÔºåÂ¶ÇÊûúÊòØÂØπË±°Â∞±ÊîæÂà∞Ê†àÈáåÔºåÂê¶ÂàôÁõ¥Êé•Êã∑Ë¥ù
  while(loopList.length) {
    const node = loopList.pop()
    const parent = node.parent
    const key = node.key
    const data = node.data
    const typeTemp = Object.prototype.toString.call(data)

    let res = parent

    if(typeof key !== 'undefined') {
      // / Âæ™ÁéØËøõÊù• parentËÆ∞ÂΩïÁöÑ‰∏ä‰∏Ä‰∏™ÁöÑÂÄº ‰∏çÊòØÂØπË±°Â∞±ÊòØÊï∞ÁªÑ ÈáçÊñ∞ÁªôËøô‰∏™‰ΩçÁΩÆ parent[key] ÂàùÂßãÂåñ
      res = parent[key] = typeTemp === "[object Object]" ? {} : []
    }

    if(typeTemp === '[object Array]') {
      for(let i = 0,iL = data.length;i < iL;i++){
        let typeInner = Object.prototype.toString.call(data[i])

        if(data[i] === data) {
          res[i] = res
        } else if (typeInner === "[object Object]" || typeInner === "[object Array]") {
          loopList.push({
            parent: res,
            key: i,
            data: data[i]
          })
        } else {
          res[i] = data[i]
        }
      }
    } else if (typeTemp === '[object Object]') {
      for(let k in data) {
        let typeInner = Object.prototype.toString.call(data[k])

        if(data.hasOwnProperty(k)) {
          if(data[k] === data) {
            res[k] = res
          } else if(typeInner === "[object Object]" || typeInner === "[object Array]") {
            loopList.push({
              parent: res,
              key: k,
              data: data[k]
            })
          } else {
            res[k] = data[k]
          }
        }
      }
    }

    // for(let k in data) {
    //   if(data.hasOwnProperty(k)) {
    //     if(typeof data[k] === "object"){
    //       loopList.push({
    //         parent: res,
    //         key: k,
    //         data: data[k]
    //       })
    //     } else {
    //       res[k] = data[k]
    //     }
    //   }
    // }
  }

  return target
}


// ÊîπÁî®Âæ™ÁéØÂêéÔºå‰∏ç‰ºöÂá∫Áé∞ÁàÜÊ†àÔºå‰ΩÜÊòØÂØπ‰∫éÂæ™ÁéØÂºïÁî®‰æùÁÑ∂Êó†ÂäõÂ∫î‰ªòum... Â§öÊ¨°ÂºïÁî®Ôºü

// È¶ñÂÖàÁöÑÁúã‰∏Ä‰∏ãÂºïÁî®‰∏¢Â§±
var b = {}
var a = {a1: b, a2: b}
// // ËøôÈáåÊòØÂçïÁ∫ØÁöÑÂºïÁî®
// console.log(a.a1 === a.a2) // true

// // ËøôÈáåÂ∞±‰ºöÊñ∞ÂàõÂª∫‰∏Ä‰∏™{} <-ÂéüÂõ†Â∞±Âú®‰∫éÊ≠§
var c = clone(a)
console.log(c.a1 === c.a2) // false

var d = cloneForce(a)
console.log(d)
console.log(d.a1 === d.a2) // true ‰øùÊåÅ‰ΩèÂºïÁî®ÂÖ≥Á≥ª


// ÂºïÂÖ•‰∏Ä‰∏™Êï∞ÁªÑuniqueList Â≠òÂÇ®Â∑≤ÁªèÊã∑Ë¥ùÁöÑÊï∞ÁªÑÔºåÊØèÊ¨°Âæ™ÁéØÈÅçÂéÜÁöÑÊó∂ÂÄôÔºåÂà§Êñ≠ÊòØÂê¶Âú® uniquList Âú®Â∞±‰∏çÊâßË°åÊã∑Ë¥ùÈÄªËæë‰∫Ü
// cloneForceÂú®ÂØπË±°Êï∞ÊçÆÈáèÂæàÂ§öÁöÑÊó∂ÂÄôÂá∫Áé∞ÂæàÂ§ßÁöÑÈóÆÈ¢ò Êï∞ÊçÆÈáèÂæàÂ§ß‰∏çÈÄÇÂêà‰ΩøÁî®cloneForce
function cloneForce (source) {
  const uniqueList = []
  let target = null

  // Ê†πËäÇÁÇπ
  if(type === '[object Object]') {
    target = {}
  } else if(type === '[object Array]'){
    target = []
  }

  // target Âíå source ËøôÈùûÂ∏∏Â•ΩÁêÜËß£ËøôÂæ™ÁéØ
  const loopList = [{
    parent: target,
    key: undefined,
    data: source
  }]

  while(loopList.length) {
    const node = loopList.pop()
    const parent = node.parent
    const key = node.key
    const data = node.data
    const typeTemp = Object.prototype.toString.call(data)

    let res = parent
    if(typeof key !== 'undefined') {
      res = parent[key] = typeTemp === "[object Object]" ? {} : []
    }

    let uniqueData = find(uniqueList, data)
    // Â¶ÇÊûúÂú®ÁöÑËØùÂ∞±‰∏çÊâßË°åÊã∑Ë¥ùÈÄªËæë‰∫Ü
    if(uniqueData) {
      // sourceÂëΩ‰∏≠ÁºìÂ≠ò ‰∏çË¶ÅÁî® res[] ÊÇ®ÁúãÁúãÂºïÁî®
      parent[key] = uniqueData.target
      continue
    }

    // resÁöÑÂ∞±ÊòØÂ§çÂà∂ÁöÑÁªìÊûú
    uniqueList.push({
      source: data,
      target: res
    })

    if(typeTemp === '[object Array]') {
      for(let i = 0,iL = data.length;i < iL;i++) {
        
        if(data[i] === data) {
          res[i] = res
        } else if(isClone(data[i])) {
          loopList.push({
            parent: res,
            key: i,
            data: data[i]
          })  
        } else {
          res[i] = data[i]
        }
      }
    } else if (typeTemp === '[object Object]') {
      for(let k in data) {
        if(data.hasOwnProperty(k)) {
          if(data[k] === data) {
            res[k] = res
          } else if (isClone(data[k])) {
            loopList.push({
              parent: res,
              key: k,
              data: data[k]
            })
          } else {
            res[k] = data[k]
          }
        }
      }
    }
  }

  return target
}

function find(arr, item) {
  for(let i = 0;i < arr.length;i++) {
    if(arr[i].source === item) {
      return arr[i]
    }
  }

  return null
}

function isClone(source) {
  let type = Object.prototype.toString.call(source)

  return type === "[object Object]" || type === "[object Array]"
}